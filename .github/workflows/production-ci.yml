name:
  MAIN CI
  # develop Î∏åÎûúÏπòÏóê pushÍ∞Ä Îê† ÎïåÎßàÎã§ Ïù¥ actionÏù¥ Ïã§ÌñâÎê©ÎãàÎã§.
on:
  push:
    branches:
      - main
    tags:
      - "v*"
      - "production-**"

jobs:
  Deploy:
    runs-on: ubuntu-latest

    steps: # 1 - ÏÜåÏä§ÏΩîÎìú Î≥µÏÇ¨
      - name: Checkout source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Cache node modules # 2 - node_modules Ï∫êÏã±
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install Dependencies # 3 - ÏùòÏ°¥ÏÑ± Ìå®ÌÇ§ÏßÄ ÏÑ§Ïπò
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Set Kakao API Key in env.js
        run: |
          echo "üõ†Ô∏è Ïπ¥Ïπ¥Ïò§Îßµ API ÌÇ§Î•º env.jsÏóê Ï£ºÏûÖ Ï§ë..."
          sed -i "s|REPLACE_KAKAO_MAP_API_KEY|${{ secrets.KAKAO_MAP_API_KEY }}|" ./public/env.js
          sed -i "s|REPLACE_API_BASE_URL|${{ secrets.API_BASE_URL }}|" ./public/env.js

      - name: Fetch tags
        run: git fetch --tags

      - name: Get latest tag
        run: |
          VERSION=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create version.json
        run: |
          echo "{\"version\": \"${RELEASE_VERSION}\"}" > public/version.json
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Debug version.json
        run: |
          cat public/version.json

      - name: Check version in env
        run: |
          echo "‚úÖ RELEASE_VERSION is: $RELEASE_VERSION"
        env:
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}

      - name: Build # 4 - ÎπåÎìú
        run: npm run build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Upload Sentry Release & Sourcemaps
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: kakao-tech-bootcamp
          SENTRY_PROJECT: gangazido
          SENTRY_RELEASE: ${{ github.sha }}
        with:
          environment: production
          sourcemaps: ./build/static/js
          ignore_missing: true

      - name: Configure AWS Credentials # 5 - AWS Ïù∏Ï¶ù
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Backup Current Build in S3 # 6. ÌòÑÏû¨ ÎπåÎìú Î∞±ÏóÖ
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          aws s3 cp --recursive s3://${{ secrets.AWS_BUCKET_NAME }} s3://${{ secrets.AWS_BUCKET_NAME }}/versions/$TIMESTAMP
          aws s3 cp --recursive s3://${{ secrets.AWS_BUCKET_NAME }} s3://${{ secrets.AWS_BUCKET_NAME }}/versions/latest

      - name: Deploy to S3 safely (Preserve uploads)
        run: |
          mkdir temp-build
          rsync -a \
            --exclude 'pet/' \
            --exclude 'uploads/user/' \
            ./build/ temp-build/
          aws s3 sync temp-build/ s3://${{ secrets.AWS_BUCKET_NAME }} --delete \
            --exclude 'pet/*' \
            --exclude 'uploads/user/*'

      - name: Invalidate CloudFront Cache # 8 - CloudFront Ï∫êÏãú Î¨¥Ìö®Ìôî
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} --paths "/*"
#releseÏ§ëÎ≥µ
